/***************************************************************************
	PLaTHEA: People Localization and Tracking for HomE Automation
	Copyright (C) 2014 Francesco Leotta
	
	This file is part of PLaTHEA
	PLaTHEA is free software: you can redistribute it and/or modify
	it under the terms of the GNU Lesser Public License as published by
	the Free Software Foundation, version 3 of the License.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	
	GNU Lesser Public License for more details.

	You should have received a copy of the GNU Lesser Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
****************************************************************************/

#include "ApplicationWorkFlow.h"
#include "Shared.h"

extern SystemInfo *si;

void AllGrayed(HMENU hMenu) {
	EnableMenuItem(hMenu, ID_SISTEMA_INITIALIZESYSTEM, MF_GRAYED);
	EnableMenuItem(hMenu, ID_SYSTEM_STOPACQUISITION, MF_GRAYED);
	EnableMenuItem(hMenu, ID_SYSTEM_LOADCONFIGURATIONFILE, MF_GRAYED);
	EnableMenuItem(hMenu, ID_SYSTEM_SAVECONFIGURATIONFILEAS, MF_GRAYED);
	EnableMenuItem(hMenu, ID_SYSTEM_SAVECONFIGURATIONFILE, MF_GRAYED);
	EnableMenuItem(hMenu, ID_SYSTEM_SELECTHAARCASCADEXML, MF_GRAYED);
	EnableMenuItem(hMenu, ID_SYSTEM_EDITFACEDATABASE, MF_GRAYED);
	EnableMenuItem(hMenu, ID_TEST_SYNCHRONIZATIONTEST, MF_GRAYED);
	EnableMenuItem(hMenu, ID_TEST_TESTDESIGNER, MF_GRAYED);
	EnableMenuItem(hMenu, ID_TEST_POSITIONTEST, MF_GRAYED);
	EnableMenuItem(hMenu, ID_TEST_STATISTICANALYZER, MF_GRAYED);
	EnableMenuItem(hMenu, ID_TEST_PLATHEARECORDER, MF_GRAYED);
	EnableMenuItem(hMenu, ID_CALIBRATION_INTERNALCALIBRATIONPROCEDURE, MF_GRAYED);
	EnableMenuItem(hMenu, ID_CALIBRATION_STARTEXTERNALCALIBRATION, MF_GRAYED);
	EnableMenuItem(hMenu, ID_CALIBRATION_LOADEXTERNALCALIBRATIONDATA, MF_GRAYED);
	EnableMenuItem(hMenu, ID_CALIBRATION_SAVEEXTERNALCALIBRATIONDATA, MF_GRAYED);
	EnableMenuItem(hMenu, ID_CALIBRATION_EDITROOMSETTINGS, MF_GRAYED);
	EnableMenuItem(hMenu, ID_LOCALIZATIONENGINE_STARTLOCALIZATIONENGINE, MF_GRAYED);
	EnableMenuItem(hMenu, ID_LOCALIZATIONENGINE_ENDINITIALIZATIONPHASE, MF_GRAYED);
	EnableMenuItem(hMenu, ID_LOCALIZATIONENGINE_STOPLOCALIZATIONENGINE, MF_GRAYED);
	EnableMenuItem(hMenu, ID_LOCALIZATIONENGINE_SETENGINEPARAMETERS, MF_GRAYED);
}

void StandbyMenu(HMENU hMenu) {
	EnableMenuItem(hMenu, ID_SISTEMA_INITIALIZESYSTEM, MF_ENABLED);
	EnableMenuItem(hMenu, ID_SYSTEM_STOPACQUISITION, MF_GRAYED);
	EnableMenuItem(hMenu, ID_SYSTEM_LOADCONFIGURATIONFILE, MF_ENABLED);
	EnableMenuItem(hMenu, ID_SYSTEM_SAVECONFIGURATIONFILEAS, MF_ENABLED);
	EnableMenuItem(hMenu, ID_SYSTEM_SAVECONFIGURATIONFILE, MF_ENABLED);
	EnableMenuItem(hMenu, ID_SYSTEM_SELECTHAARCASCADEXML, MF_ENABLED);
	EnableMenuItem(hMenu, ID_SYSTEM_EDITFACEDATABASE, MF_ENABLED);
	EnableMenuItem(hMenu, ID_TEST_SYNCHRONIZATIONTEST, MF_GRAYED);
	EnableMenuItem(hMenu, ID_TEST_TESTDESIGNER, MF_ENABLED);
	EnableMenuItem(hMenu, ID_TEST_POSITIONTEST, MF_ENABLED);
	EnableMenuItem(hMenu, ID_TEST_STATISTICANALYZER, MF_ENABLED);
	EnableMenuItem(hMenu, ID_TEST_PLATHEARECORDER, MF_GRAYED);
	EnableMenuItem(hMenu, ID_CALIBRATION_INTERNALCALIBRATIONPROCEDURE, MF_ENABLED);
	EnableMenuItem(hMenu, ID_CALIBRATION_STARTEXTERNALCALIBRATION, MF_GRAYED);
	EnableMenuItem(hMenu, ID_CALIBRATION_LOADEXTERNALCALIBRATIONDATA, MF_ENABLED);
	EnableMenuItem(hMenu, ID_CALIBRATION_SAVEEXTERNALCALIBRATIONDATA, MF_ENABLED);
	EnableMenuItem(hMenu, ID_CALIBRATION_EDITROOMSETTINGS, MF_ENABLED);
	EnableMenuItem(hMenu, ID_LOCALIZATIONENGINE_STARTLOCALIZATIONENGINE, MF_GRAYED);
	EnableMenuItem(hMenu, ID_LOCALIZATIONENGINE_ENDINITIALIZATIONPHASE, MF_GRAYED);
	EnableMenuItem(hMenu, ID_LOCALIZATIONENGINE_STOPLOCALIZATIONENGINE, MF_GRAYED);
	EnableMenuItem(hMenu, ID_LOCALIZATIONENGINE_SETENGINEPARAMETERS, MF_ENABLED);
}

void AcquisitionNoCalibMenu(HMENU hMenu) {
	EnableMenuItem(hMenu, ID_SISTEMA_INITIALIZESYSTEM, MF_GRAYED);
	EnableMenuItem(hMenu, ID_SYSTEM_STOPACQUISITION, MF_ENABLED);
	EnableMenuItem(hMenu, ID_SYSTEM_LOADCONFIGURATIONFILE, MF_ENABLED);
	EnableMenuItem(hMenu, ID_SYSTEM_SAVECONFIGURATIONFILEAS, MF_ENABLED);
	EnableMenuItem(hMenu, ID_SYSTEM_SAVECONFIGURATIONFILE, MF_ENABLED);
	EnableMenuItem(hMenu, ID_SYSTEM_SELECTHAARCASCADEXML, MF_ENABLED);
	EnableMenuItem(hMenu, ID_SYSTEM_EDITFACEDATABASE, MF_ENABLED);
	EnableMenuItem(hMenu, ID_TEST_SYNCHRONIZATIONTEST, MF_ENABLED);
	EnableMenuItem(hMenu, ID_TEST_TESTDESIGNER, MF_ENABLED);
	EnableMenuItem(hMenu, ID_TEST_POSITIONTEST, MF_ENABLED);
	EnableMenuItem(hMenu, ID_TEST_STATISTICANALYZER, MF_ENABLED);
	EnableMenuItem(hMenu, ID_TEST_PLATHEARECORDER, MF_ENABLED);
	EnableMenuItem(hMenu, ID_CALIBRATION_INTERNALCALIBRATIONPROCEDURE, MF_ENABLED);
	EnableMenuItem(hMenu, ID_CALIBRATION_STARTEXTERNALCALIBRATION, MF_GRAYED);
	EnableMenuItem(hMenu, ID_CALIBRATION_LOADEXTERNALCALIBRATIONDATA, MF_ENABLED);
	EnableMenuItem(hMenu, ID_CALIBRATION_SAVEEXTERNALCALIBRATIONDATA, MF_ENABLED);
	EnableMenuItem(hMenu, ID_CALIBRATION_EDITROOMSETTINGS, MF_ENABLED);
	EnableMenuItem(hMenu, ID_LOCALIZATIONENGINE_STARTLOCALIZATIONENGINE, MF_GRAYED);
	EnableMenuItem(hMenu, ID_LOCALIZATIONENGINE_ENDINITIALIZATIONPHASE, MF_GRAYED);
	EnableMenuItem(hMenu, ID_LOCALIZATIONENGINE_STOPLOCALIZATIONENGINE, MF_GRAYED);
	EnableMenuItem(hMenu, ID_LOCALIZATIONENGINE_SETENGINEPARAMETERS, MF_ENABLED);
}

void AcquisitionCalibMenu(HMENU hMenu) {
	EnableMenuItem(hMenu, ID_SISTEMA_INITIALIZESYSTEM, MF_GRAYED);
	EnableMenuItem(hMenu, ID_SYSTEM_STOPACQUISITION, MF_ENABLED);
	EnableMenuItem(hMenu, ID_SYSTEM_LOADCONFIGURATIONFILE, MF_ENABLED);
	EnableMenuItem(hMenu, ID_SYSTEM_SAVECONFIGURATIONFILEAS, MF_ENABLED);
	EnableMenuItem(hMenu, ID_SYSTEM_SAVECONFIGURATIONFILE, MF_ENABLED);
	EnableMenuItem(hMenu, ID_SYSTEM_SELECTHAARCASCADEXML, MF_ENABLED);
	EnableMenuItem(hMenu, ID_SYSTEM_EDITFACEDATABASE, MF_ENABLED);
	EnableMenuItem(hMenu, ID_TEST_SYNCHRONIZATIONTEST, MF_ENABLED);
	EnableMenuItem(hMenu, ID_TEST_TESTDESIGNER, MF_ENABLED);
	EnableMenuItem(hMenu, ID_TEST_POSITIONTEST, MF_ENABLED);
	EnableMenuItem(hMenu, ID_TEST_STATISTICANALYZER, MF_ENABLED);
	EnableMenuItem(hMenu, ID_TEST_PLATHEARECORDER, MF_ENABLED);
	EnableMenuItem(hMenu, ID_CALIBRATION_INTERNALCALIBRATIONPROCEDURE, MF_GRAYED);
	EnableMenuItem(hMenu, ID_CALIBRATION_STARTEXTERNALCALIBRATION, MF_ENABLED);
	EnableMenuItem(hMenu, ID_CALIBRATION_LOADEXTERNALCALIBRATIONDATA, MF_ENABLED);
	EnableMenuItem(hMenu, ID_CALIBRATION_SAVEEXTERNALCALIBRATIONDATA, MF_ENABLED);
	EnableMenuItem(hMenu, ID_CALIBRATION_EDITROOMSETTINGS, MF_ENABLED);
	EnableMenuItem(hMenu, ID_LOCALIZATIONENGINE_STARTLOCALIZATIONENGINE, MF_ENABLED);
	EnableMenuItem(hMenu, ID_LOCALIZATIONENGINE_ENDINITIALIZATIONPHASE, MF_GRAYED);
	EnableMenuItem(hMenu, ID_LOCALIZATIONENGINE_STOPLOCALIZATIONENGINE, MF_GRAYED);
	EnableMenuItem(hMenu, ID_LOCALIZATIONENGINE_SETENGINEPARAMETERS, MF_ENABLED);
}

void ElaborationMenu(HMENU hMenu) {
	EnableMenuItem(hMenu, ID_SISTEMA_INITIALIZESYSTEM, MF_GRAYED);
	EnableMenuItem(hMenu, ID_SYSTEM_STOPACQUISITION, MF_GRAYED);
	EnableMenuItem(hMenu, ID_SYSTEM_LOADCONFIGURATIONFILE, MF_GRAYED);
	EnableMenuItem(hMenu, ID_SYSTEM_SAVECONFIGURATIONFILEAS, MF_GRAYED);
	EnableMenuItem(hMenu, ID_SYSTEM_SAVECONFIGURATIONFILE, MF_GRAYED);
	EnableMenuItem(hMenu, ID_SYSTEM_SELECTHAARCASCADEXML, MF_GRAYED);
	EnableMenuItem(hMenu, ID_SYSTEM_EDITFACEDATABASE, MF_GRAYED);
	EnableMenuItem(hMenu, ID_TEST_SYNCHRONIZATIONTEST, MF_GRAYED);
	EnableMenuItem(hMenu, ID_TEST_TESTDESIGNER, MF_GRAYED);
	EnableMenuItem(hMenu, ID_TEST_POSITIONTEST, MF_ENABLED);
	EnableMenuItem(hMenu, ID_TEST_PLATHEARECORDER, MF_ENABLED);
	EnableMenuItem(hMenu, ID_CALIBRATION_INTERNALCALIBRATIONPROCEDURE, MF_GRAYED);
	EnableMenuItem(hMenu, ID_CALIBRATION_STARTEXTERNALCALIBRATION, MF_GRAYED);
	EnableMenuItem(hMenu, ID_CALIBRATION_LOADEXTERNALCALIBRATIONDATA, MF_GRAYED);
	EnableMenuItem(hMenu, ID_CALIBRATION_SAVEEXTERNALCALIBRATIONDATA, MF_GRAYED);
	EnableMenuItem(hMenu, ID_CALIBRATION_EDITROOMSETTINGS, MF_GRAYED);
	EnableMenuItem(hMenu, ID_LOCALIZATIONENGINE_STARTLOCALIZATIONENGINE, MF_GRAYED);
	EnableMenuItem(hMenu, ID_LOCALIZATIONENGINE_ENDINITIALIZATIONPHASE, MF_ENABLED);
	EnableMenuItem(hMenu, ID_LOCALIZATIONENGINE_STOPLOCALIZATIONENGINE, MF_ENABLED);
	EnableMenuItem(hMenu, ID_LOCALIZATIONENGINE_SETENGINEPARAMETERS, MF_ENABLED);
}

ApplicationWorkFlow *ApplicationWorkFlow::instance = NULL;

void ApplicationWorkFlow::UpdateSystemState(InternalEvent ev) {
	HMENU hMenu = GetMenu(si->GetMainWindow());

	if (currentState == STANDBY) {
		switch (ev) {
			case APPLICATION_STARTED:
				StandbyMenu(hMenu);
				break;
			case ACQUISITION_STARTED_CALIB:
				AcquisitionCalibMenu(hMenu);
				currentState = ACQUISITION_INTERNAL_CALIB;
				break;
			case ACQUISITION_STARTED_NO_CALIB:
				AcquisitionNoCalibMenu(hMenu);
				currentState = ACQUISITION_NO_INTERNAL_CALIB;
				break;
		}
	} else if (currentState == ACQUISITION_INTERNAL_CALIB) {
		switch (ev) {
			case ACQUISITION_STOPPED:
				StandbyMenu(hMenu);
				currentState = STANDBY;
				break;
			case EXTERNAL_CALIBRATION_STARTED:
				AllGrayed(hMenu);
				currentState = EXTERNAL_CALIBRATION;
				break;
			case ELABORATION_STARTED:
				ElaborationMenu(hMenu);
				currentState = ELABORATION;
				break;
		}
	} else if (currentState == ACQUISITION_NO_INTERNAL_CALIB) {
		switch (ev) {
			case ACQUISITION_STOPPED:
				StandbyMenu(hMenu);
				currentState = STANDBY;
				break;
		}
	} else if (currentState == EXTERNAL_CALIBRATION) {
		switch (ev) {
			case CALIBRATION_ENDED:
				AcquisitionCalibMenu(hMenu);
				currentState = ACQUISITION_INTERNAL_CALIB;
				break;
		}
	} else if (currentState == ELABORATION) {
		switch (ev) {
			case ELABORATION_ENDED:
				AcquisitionCalibMenu(hMenu);
				currentState = ACQUISITION_INTERNAL_CALIB;
				break;
		}
	}
}